#include <iostream>
#include <windows.h>
#include <conio.h>
#include <math.h>
#include <string>
#include<fstream>

using namespace std;
//Forward Declaration of functions
void gotoRowCol(int x ,int y );
void sleep(int a);
void logo(int k);
void score();
void recordScore(string playerName, int score);
void displayLeaderboard();
//Global Variables
int coins;
int moves;
bool ex=0;
bool win1=0;
int health;
string lev;

//Functions
void gotoRowCol(int rpos, int cpos) {
    int xpos = cpos, ypos = rpos;
    COORD scrn;
    HANDLE hOutput = GetStdHandle(STD_OUTPUT_HANDLE);
    scrn.X = cpos;
    scrn.Y = rpos;
    SetConsoleCursorPosition(hOutput, scrn);
}
void sleep(int m) {
    for (int j = 0; j < m * 21000; j++) {}
}

void exit_()
{    ex=1;
}

void logo(int l)
{
    int r,c;
    char k =178;
  if (lev== "EASY"){
    r=3;
    c=50;
  }
  else if (lev== "MEDIUM"){
    r=3;
    c=60;
  }
   else if (lev== "HARD"){
    r=3;
    c=70;
  }
  else   {
    r=3;
    c=50;
  }
    gotoRowCol(r++,c);
    cout<<k<<k<<k<<k<<"  "<<k<<k<<k<<"  "<<k<<"   "<<k<<"  "<<k<<k<<k<< "  ";
    gotoRowCol(r++,c);
    cout<<k<<"     "<<k<<" "<<k<<"  "<<k<<"  "<<" "<<k<<"  "<<k<< "  ";
    gotoRowCol(r++,c);
    cout<<k<<" "<<k<<k<<"  "<<k<<k<<k<<"  "<<k<<k<<" "<<k<<k<<"  "<<k<<k<<k<< "  ";
    gotoRowCol(r++,c);
    cout<<k<<"  "<<k<<"  "<<k<<" "<<k<<"  "<<k<<" "<<k<<" "   <<k<<"  "<<k<<"       ";
    gotoRowCol(r++,c);
    cout<<k<<k<<k<<k<<"  "<<k<<" "<<k<<"  "<<k<<"   "<<k<<"  "<<k<<k<<k<< "  ";
}
int L=0;
void score()
{
    gotoRowCol(1,10);
        cout<<"Coins : "<<coins<<" $";
    gotoRowCol(5,10);
        cout<<"Level : "<<L<<".";
    gotoRowCol(7,10);
        cout<<lev<<".";
    gotoRowCol(3,10);
        cout<<"HEALTH LEFT :"<<health;
    gotoRowCol(9,10);
        cout<<moves<<" Moves Left ";
}
void game_over()
{
    system("cls");

    score();
    lev=" ";
    logo(1);
    gotoRowCol(15, 50);
    cout << "=========================" << endl;
    gotoRowCol(16, 50);
    cout << "        GAME OVER       " << endl;
    gotoRowCol(17, 50);
    cout << "=========================" << endl;
    gotoRowCol(18, 50);
    cout << "Thank you for playing!" << endl;
    getch();
}

 void instructions()
 {
    system("cls");
    gotoRowCol(5, 50);
    cout << "Instructions:\n";
    gotoRowCol(9, 50);
    cout << "1. Use W/A/S/D to move up/left/down/right.\n";
    gotoRowCol(10, 50);
    cout << "2. Collect coins ($) to increase your score.\n";
    gotoRowCol(11, 50);
    cout << "3. Reach the exit (E) to win the level.\n";
    gotoRowCol(12, 50);
    cout << "4. Avoid running out of moves .\n";
    gotoRowCol(13, 50);
    cout << "5. Avoid running out of Health And hitting  \"X\".   \n";
    gotoRowCol(14, 50);
    cout << "6. You can pass through "<<'\xB0' <<"  blocks\n";
    gotoRowCol(15, 50);
    cout << "7. Have fun and good luck!\n";
    gotoRowCol(16, 50);
 }

void intro() {
    system("cls");
    string lines[] = {
        "*******************************",
        "*                             *",
        "* WELCOME TO THE TREASURE HUNT*",
        "*                             *",
        "*******************************",
        "*                             *",
        "*     Get ready to navigate   *",
        "*        the mysterious       *",
        "*            maze!            *",
        "*                             *",
        "*******************************"
    };
    int c=5;
    gotoRowCol(5,50);
    sleep(5000);
    for (const string& line : lines) {
         sleep(5000);
        cout << line << endl;
        gotoRowCol(c++,50);
    }

    sleep(5000);
    system("cls");

    string title = "THE TREASURE HUNT";
    string subtitle = "Your challenge awaits...";

    gotoRowCol(5, 50);
    for (char c : title) {
        cout << c;
        sleep(5000);
    }

    gotoRowCol(7, 45);
    for (char c : subtitle) {
        cout << c;
        sleep(5000);
    }

    sleep(50000);
    instructions();
    cout << "Press any key to start the game...";

    getch();
    system("cls");
}

void win() {
    system("cls");
    logo(1);

    string lines[] = {
        "*******************************",
        "*                             *",
        "*    CONGRATULATIONS! YOU     *",
        "*       WON THE GAME!         *",
        "*                             *",
        "*******************************"
    };

    for (const string& line : lines) {
        gotoRowCol(10, 45);
        cout << line << endl;
        sleep(500);
    }

    sleep(500);
    system("cls");

    string congrats = "CONGRATULATIONS!";
    string message = "You successfully navigated the maze!";
    string scoreMessage = "Your score is: " + to_string(coins);

    gotoRowCol(5, 40);
    for (char c : congrats) {
        cout << c;
        sleep(50);
    }

    gotoRowCol(7, 35);
    for (char c : message) {
        cout << c;
        sleep(50);
    }

    gotoRowCol(9, 38);
    for (char c : scoreMessage) {
        cout << c;
        sleep(50);
    }

    sleep(500);
    cout << "\n\nEnter your name: ";
    string playerName;
    cin >> playerName;

    recordScore(playerName, coins);
    displayLeaderboard();

    win1 = 1;
    getch();
}

// Function for File Handling
void recordScore(string playerName, int score) {
    ofstream file("scores.txt", ios::app);
    if (file.is_open()) {
        file << playerName << " " << score << endl;
        file.close();
    } else {
        cout << "Unable to open file to record score." << endl;
    }
}

void displayLeaderboard() {
    ifstream file("scores.txt");
    if (!file) {
        cout << "No scores recorded yet!\n";
        return;
    }

    string playerName;
    int score;

    string names[100];
    int scores[100];
    int count = 0;

    while (file >> playerName >> score) {
        names[count] = playerName;
        scores[count] = score;
        count++;
    }
    file.close();

    for (int i = 0; i < count - 1; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (scores[j] < scores[j + 1]) {
                swap(scores[j], scores[j + 1]);
                swap(names[j], names[j + 1]);
            }
        }
    }
    system("cls");
    int c=5;
    gotoRowCol(5,45);
    cout << "Leaderboard:\n";
    gotoRowCol(++c,45);
    cout << "==============================\n";
    for (int i = 0; i < count; i++) {
        gotoRowCol(++c,45);
        cout << "|"<<names[i]<<""  ;
        gotoRowCol(c,55);
        cout<< " |"<<scores[i] ;
        gotoRowCol(c,65);
        cout<< " |points|";
    }
    gotoRowCol(++c,45);
    cout << "==============================\n";
}

struct Node {
    char type;
    Node* up;
    Node* down;
    Node* left;
    Node* right;

    Node(char t) : type(t), up(nullptr), down(nullptr), left(nullptr), right(nullptr) {}
};


void print_board_(int dimensions_x, int dimensions_y) {
    logo(1);
    dimensions_x=2*dimensions_y;
    char b=178;
    int row = 11, col = 50;
    gotoRowCol(row, col);
    for (int i = 0; i <= dimensions_x ; i++) {
        cout << b;
    }

    for (int i = 0; i <= dimensions_y + 1; i++) {
        gotoRowCol(row, col);
        cout << b;
        row++;
    }
    
    for (int i = 0; i <= dimensions_x ; i++) {
        cout << b;
        col++;
    }
    
    for (int i = 0; i <= dimensions_y + 1; i++) {
        row--;
        gotoRowCol(row, col);
        cout << b;
    }
    row = 10, col = 49;
    gotoRowCol(row, col);
    
    for (int i = 0; i <= dimensions_x + 4; i++) {
        cout << b;
    }
    
     for (int i = 0; i <= dimensions_y + 2; i++) {
            gotoRowCol(++row, col);
        cout << b;
    }
    
     for (int i = 0; i <= dimensions_x + 2; i++) {
            gotoRowCol(row, ++col);
        cout << b;
    }
    
     for (int i = 0; i <= dimensions_y + 2; i++) {
            gotoRowCol(--row, col);
        cout << b;
    }
    
    col++;
     for (int i = 0; i <= dimensions_y + 2; i++) {
            gotoRowCol(++row, col);
        cout << b;
    }
    
     row = 9, col = 48;
       for (int i = 0; i <= dimensions_y + 3; i++) {
            gotoRowCol(++row, col);
        cout << b;
       }
     score();
}

void displayMaze(Node* start,int x) {
    Node* row = start;
    int r = 12, c = 51;
    print_board_(x, x);
    while (row) {
        Node* col = row;
        while (col) {
            gotoRowCol(r, c);
            cout << col->type << "";
            col = col->right;
            c++;
        }
        r++;
        c = 51;
        row = row->down;
    }
    gotoRowCol(10,10);
}

bool MOVPlayer(Node*& player, char MOV) {
    Node* next = nullptr;
    if (MOV == 'W' && player->up && player->up->type != '\xB1') {
        next = player->up;

    } else if (MOV == 'A' && player->left && player->left->type != '\xB1') {
        next = player->left;

    } else if (MOV == 'S' && player->down && player->down->type != '\xB1') {
        next = player->down;

    } else if (MOV == 'D' && player->right && player->right->type != '\xB1') {
        next = player->right;

    }
    else if (MOV == 'E' ) {
        exit_();
    }

    if (next) {
        if (next->type == 'E') {
            player->type = ' ';
            next->type = 'P';
            player = next;
            win1=1;
            return true;
        }
        if(next->type == '$') {
            coins = coins + 10;
        }
        if(next->type == 'X') {
           health--;
        }

        player->type = ' ';
        next->type = 'P';
        player = next;

        return true;
    }
    return false;
}

//Function for levels in game
void level_10() {
    ex=0;
    L=10;
    health=5;
    lev="HARD";
    moves=150;
    win1=0;
    int x=30;
    Node* nodes[30][60];
    char maze[30][60] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'E','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$','.', '\xB1', '$', '\xB1', '$', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1' },
    {'.', '.', '\xB1', '.', '\xB1', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1','.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1','\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'E','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB1', '\xB1', '\xB1'}

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (2*x)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }
        moves--;

       if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {

    }
}

void level_9() {
    ex=0;
    win1=0;
    L=9;
    health=5;
    lev="HARD";
    moves=150;
    int x=30;
    Node* nodes[30][60];
 
    char maze[30][60] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB0', '.', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'E','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$','.', '\xB1', '$', '\xB1', '$', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1',  'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X','\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1' },
    {'.', '.', '\xB1', '.', '\xB1', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1','.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1','\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB1', '\xB1', '\xB1'}

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (2*x)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }
        moves--;

       if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
      level_10();
    }
}

void level_8() {
    ex=0;
    win1=0;
    L=8;
    health=5;
    lev="HARD";
    moves=200;
    int x=30;
    Node* nodes[30][60];
    
    char maze[30][60] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB0', '.', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1' },
    {'.', '.', '\xB1', '.', '\xB1', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1'},
    {'.', '.', '.', '\xB1', '.', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '.', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB1', '\xB1', '\xB1'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$','.', '\xB1', '$', '\xB1', '$', '\xB1', '\xB1', '.', 'X', '.',},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1',  'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X','\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1','.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1','.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1','\xB1','\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1','\xB1', '.', '\xB0', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.','X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.','\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.','\xB1', '\xB1', '\xB1', '$','.', '$', '$', '\xB0', '\xB1', '\xB1'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.','\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1','\xB1', '\xB1', '\xB1', '$','$', '$', '$', '\xB0', 'E', '\xB1'}

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (2*x)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }
        moves--;

       if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], 30);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
      level_9();
    }
}

void level_7() {
    L=7;
    win1=0;
    health=5;
    ex=0;
    lev="MEDIUM";
    moves=110;
    int x=20;
    Node* nodes[20][40];

    char maze[20][40] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', '$', '$', '.', '.', '.', '.', '$', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '.', '$', '$', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'X', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '$', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '$', '$', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', 'E', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', '\xB0', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', '\xB0', '\xB0', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '$', '$', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '$', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'X'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'}

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (x*2)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }
        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)  PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_8();
    }
}

void level_6() {
    L=6;
    win1=0;
    health=5;
    ex=0;
    lev="MEDIUM";
    moves=110;
    int x=20;
    Node* nodes[20][40];
    char maze[20][40] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', '$', '$', '.', '.', '.', '.', '$', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'E', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '$', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '$', '$', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', '\xB0', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', '\xB0', '\xB0', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '$', '$', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '$', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '$', '$', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'X'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (x*2)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }
        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)  PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_7();
    }
}

void level_5() {
    L=5;
    win1=0;
    health=5;
    ex=0;
    lev="MEDIUM";
    moves=80;
    int x=20;
    Node* nodes[20][40];
    
    char maze[20][40] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', 'E'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', '\xB0', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', '\xB0', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'X'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (x*2)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;
    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();
        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }

        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)  PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_6();
    }
}

void level_4() {
    L=4;
    win1=0;
    health=5;
    ex=0;
    lev="MEDIUM";
    moves=50;
    int x=20;
    Node* nodes[20][40];
    
    char maze[20][40] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', 'X', '.', '.', '\xB1', '.', '\xB1', '.', '.', '$', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'X', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.','.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.','$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'E'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', 'X', '.', '$', '\xB1', '.', '\xB1', '.', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1'},
    {'.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.','.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.','.', '.', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.','.', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', 'X', '.', '.', '$', '.', '.', '$', '$'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X','.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.'},

    };

    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < x-1) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < (x*2)-1) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], x);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }

        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], x);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < x; i++) {
        for (int j = 0; j < 2*x; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)  PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_5();
    }
}

void level_3() {
    win1=0;
    L=3;
    ex=0;
    health=3;
    lev="EASY";
    moves=50;
    int x=10;
    Node* nodes[10][20];
    
    char maze[10][20] = {
    {'P', '.', '.', 'X', '.', '.', '$', '.', '.', '$', '$', '.', 'X', '\xB1', '$', '.', '.', '.', '\xB1', '.'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.', '.', '\xB1', '.','\xB1','\xB1', '.', '.'},
    {'.', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.'},
    {'.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '$', 'X', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.'},
    {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '.', 'X', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '.'},
    {'.', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1'},
    {'.', '\xB1', '.', '\xB1', '.', '.', '$', '.', '\xB1', '.', 'X', '\xB1', '.', '.', 'X', '\xB1', '.', '\xB1', '.', 'X'},
    {'.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1', '\xB1', '\xB0', '\xB0', '.', '.', '\xB1', '.'},
    {'.', '.', '.', '\xB1', '.', '\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '\xB1', '$', 'X', '\xB1', '.', '.', '\xB1', '.'},
    {'$', '\xB1', '.', '$', '$', '.', '.', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1', '.', '.', '\xB1', '\xB1', 'E'}
};
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < 9) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < 19) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], 10);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }

        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], 10);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_4();
    }
}

void level_2() {
    win1=0;
    L=2;
    ex=0;
    lev="EASY";
    moves=45;
    health=3;
    int x=10;
    Node* nodes[10][20];
    
    char maze[10][20] = {
        {'P', '.', '$', '$', '.', '.', '.', '\xB1', '.', '\xB1', '.', '$', '$', '.', '.', '.', '\xB1', '.', '\xB1','.'},
        {'\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '$','.', '\xB1', '\xB1', '.', '.', '$', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '\xB1', '\xB1', '.', '\xB1', '\xB0', '.','.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.'},
        {'.', '\xB1', '\xB1', '.', '.', '$', '.', '\xB1', '.', '\xB1','.', '.', '.', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '.'},
        {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1','.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1'},
        {'.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB0', '.', '\xB1','.', '.', '$', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1'},
        {'.', '\xB1', '\xB1', '\xB1', '.', '.', '\xB1', '.', '\xB1', '\xB1','.', '.', '\xB1', '.', '\xB1', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.','$', '.', '.', '\xB1', '$', '.', '.', '\xB1', '\xB1','\xB1'},
        {'\xB1', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.', '.', '.', '.', '.'},
        {'$', '.', '.', '\xB1', '$', '.', '.', '.', '.','.', '&', '.', '.', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', 'E'}
    };

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < 9) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < 19) nodes[i][j]->right = nodes[i][j + 1];
        }
    }

    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], 10);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }

        moves--;

    if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], 10);
        if (win1) {
            coins += 200;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            delete nodes[i][j];
        }
    }
    system("cls");
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_3();
    }
}

  void level_1() {
    win1=0;
    L = 1;
    ex=0;
    health=3;
    lev="EASY";
    int x = 10;
    moves = 100;
    coins = 0;
    Node* nodes[10][20];

    char maze[10][20] = {
        {'P', 'X', '$', '$', '.', '.', '.', '\xB1', '.', '\xB1', '.', '$', '$', '.', '.', '.', '\xB1', '.', '\xB1','.'},
        {'.', '\xB1', '\xB1', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '$','.', '\xB1', '\xB1', '.', 'X', '$', '.', '\xB1', '.', '.'},
        {'.', '.', '.', '.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.','.', '\xB1', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.'},
        {'.', '\xB1', '\xB1', '.', '\xB1', '$', '.', '\xB1', '.', '\xB1','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1'},
        {'.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1','.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1'},
        {'.', '\xB1', '.', '.', '.', '\xB1', '.', '\xB1', '.', '\xB1','.', 'X', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1'},
        {'.', '\xB1', '\xB1', '\xB1', '.', '.', '\xB1', '.', '.', '.','.', '.', '.', '.', '\xB1', '\xB1', '.', '\xB1', '\xB1', '.'},
        {'.', '.', '.', '\xB1', '\xB1', '.', '.', '.', '\xB1', '.','$', '.', '.', '\xB1', '$', '.', '.', '.', '\xB1','.'},
        {'\xB1', '\xB1', '.', '\xB1', '.', '.', '\xB1', '\xB1', '.', '.','\xB1', '\xB1', '.', '\xB1', '.', '.', '\xB1', '.', '.', '.'},
        {'$', '.', '.', '\xB1', '$', '.', '.', '.', '\xB1','.', '.', '.', '\xB1', '\xB1', '\xB1', '.', '\xB1', '.', '\xB1', 'E'}
    };

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            nodes[i][j] = new Node(maze[i][j]);
        }
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            if (i > 0) nodes[i][j]->up = nodes[i - 1][j];
            if (i < 9) nodes[i][j]->down = nodes[i + 1][j];
            if (j > 0) nodes[i][j]->left = nodes[i][j - 1];
            if (j < 19) nodes[i][j]->right = nodes[i][j + 1];
        }
    }
      
    Node* player = nodes[0][0];
    cout << "Navigate the maze to find the exit (E).\n";

    char MOV;
    bool gameWon = false;

    while (!gameWon) {
        system("cls");
        displayMaze(nodes[0][0], 10);
        score();

        cout << "MOV (W/A/S/D/E): ";
        cin >> MOV;
        if (!MOVPlayer(player, MOV)) {
            cout << "Invalid MOV!\n";
            continue;
        }

        moves--;

        if (moves == 0||health==0||ex==1) {
            game_over();
            return;
        }

        system("cls");
        displayMaze(nodes[0][0], 10);
        if (win1) {
            coins += 100;
            win();
            gameWon = true;
        }
    }

    // Freeing memory
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 20; j++) {
            delete nodes[i][j];
        }
    }

    system("cls");
    logo(1);
    gotoRowCol(9,50);
    cout<<"1)      FOR MAIN MENU  PRESS 1 ";
    gotoRowCol(11,50);
    cout<<"2)        PRESS ANY KEY FOR PLAY NEXT LEVEL ";
    int choice;
    gotoRowCol(18,25);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice!=1)
    {
        level_2();
    }
}

void start()
{
    intro();
    logo(1);
    gotoRowCol(9,50);
    cout<<"LOADING ...";
    gotoRowCol(10,50);
    char ch=220;
    for(int i=0;i<20;i++)
    {
        sleep(5000);
        cout<<ch;
    }
    menu:
    lev=" ";
    system("cls");
    logo(1);

    gotoRowCol(9,50);
    cout<<"1)        PLAY";
    gotoRowCol(11,50);
    cout<<"2)      DIFFCULTY";
    gotoRowCol(13,50);
    cout<<"3)       LEVELS";
    gotoRowCol(15,50);
    cout<<"4)     LEADERBOARD";
    gotoRowCol(17,50);
    cout<<"5)     INSTRUCTIONS";
    gotoRowCol(19,50);
    cout<<"6)        EXIT";
    int choice;
    gotoRowCol(20,20);
    cout<<"Enter your Choice ::" ;
    cin>>choice;
    if(choice==1)
    {
        level_1();
        goto menu;
    }
    else if (choice==2)
    {
        menu2:
        system("cls");
        logo(1);
        gotoRowCol(9,50);
        cout<<"1)        Easy";
        gotoRowCol(11,50);
        cout<<"2)       Medium";
        gotoRowCol(13,50);
        cout<<"3)        Hard";
        gotoRowCol(15,50);
        cout<<"4)        Back";
        int choice2;
        gotoRowCol(16,25);
        cout<<"Enter your Choice ::" ;
        cin>>choice2;


    if(choice2==1)
    {
       lev="EASY";
       level_1();
       goto menu;
    }
    else if (choice2==2)
    {
        lev="Mediun";
        level_4();
    }
    else if (choice2==3)
    {
       lev ="Hard";
        level_10();
        getch;
    }
    else if (choice2==4)
    {
       goto menu;

    }
    else
    {
        cout<<"invalid choice ";
        getch();
        system("cls");
        logo(1);
        goto menu2;
    }
}
    else if (choice==3)
    {
        menu3:
        system("cls");
        logo(1);
        gotoRowCol(9,50);
        cout<<"1)        LEVEL 1";
        gotoRowCol(11,50);
        cout<<"2)        LEVEL 2";
        gotoRowCol(13,50);
        cout<<"3)        LEVEL 3";
        gotoRowCol(15,50);
        cout<<"4)        LEVEL 4";
        gotoRowCol(17,50);
        cout<<"5)        LEVEL 5";
        gotoRowCol(19,50);
        cout<<"6)         MORE ";
        gotoRowCol(21,50);
        cout<<"7)         EXIT ";
        int choice3;
        gotoRowCol(20,25);
        cout<<"Enter your Choice ::" ;
        cin>>choice3;
        
    if(choice3==7)
    {
        goto menu;
    }
    else if(choice3==6)
    {
        system("cls");
        logo(1);
        gotoRowCol(9,50);
        cout<<"1)        LEVEL 6";
        gotoRowCol(11,50);
        cout<<"2)        LEVEL 7";
        gotoRowCol(13,50);
        cout<<"3)        LEVEL 8";
        gotoRowCol(15,50);
        cout<<"4)        LEVEL 9";
        gotoRowCol(17,50);
        cout<<"5)        LEVEL 10";
        gotoRowCol(19,50);
        cout<<"6)         BACK ";
        gotoRowCol(20,25);
        cout<<"Enter your Choice ::" ;
        cin>>choice3;
        
    if(choice3==6)
    {
        goto menu3;
    }
    else if(choice3==1){
       level_6();
    }
     else if(choice3==2){
         level_7();
    }
     else if(choice3==3){
         level_8();
    }
     else if(choice3==4){
         level_9();
    }
     else if(choice3==5){
        level_10();
    }
    else {
        goto menu3;
    }

    }
     else if(choice3==1){
         level_1();
    }
     else if(choice3==2){
         level_2();
    }
     else if(choice3==3){
         level_3();
    }
     else if(choice3==4){
         level_4();
    }
     else if(choice3==5){
        level_5();
    }
 }
   else if (choice==4)
    {
        displayLeaderboard();
        getch();
        goto menu;    }
   else if (choice==5)
    {
        instructions();
        cout<<"PRESS ANY KEY TO CONTINUE......";
        getch();
        goto menu
    }
   else if (choice==6)
    {
       cout<<"Exiting ....";
        getch();
        return ;
    }
    else
    {
        cout<<"invalid choice ";
        getch();
        system("cls");
        logo(1);
        goto menu;
    }
    goto menu;
}

int main() {
    start();
    char C='\xB0';
    cout<<C;
}
